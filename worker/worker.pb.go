// Code generated by protoc-gen-go. DO NOT EDIT.
// source: worker.proto

package worker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Os int32

const (
	Os_Linux   Os = 1
	Os_Darwin  Os = 2
	Os_Windows Os = 3
)

var Os_name = map[int32]string{
	1: "Linux",
	2: "Darwin",
	3: "Windows",
}
var Os_value = map[string]int32{
	"Linux":   1,
	"Darwin":  2,
	"Windows": 3,
}

func (x Os) Enum() *Os {
	p := new(Os)
	*p = x
	return p
}
func (x Os) String() string {
	return proto.EnumName(Os_name, int32(x))
}
func (x *Os) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Os_value, data, "Os")
	if err != nil {
		return err
	}
	*x = Os(value)
	return nil
}
func (Os) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_worker_be6db57fb5a7a807, []int{0}
}

type WorkerState int32

const (
	WorkerState_Ready WorkerState = 0
	WorkerState_Busy  WorkerState = 1
)

var WorkerState_name = map[int32]string{
	0: "Ready",
	1: "Busy",
}
var WorkerState_value = map[string]int32{
	"Ready": 0,
	"Busy":  1,
}

func (x WorkerState) Enum() *WorkerState {
	p := new(WorkerState)
	*p = x
	return p
}
func (x WorkerState) String() string {
	return proto.EnumName(WorkerState_name, int32(x))
}
func (x *WorkerState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WorkerState_value, data, "WorkerState")
	if err != nil {
		return err
	}
	*x = WorkerState(value)
	return nil
}
func (WorkerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_worker_be6db57fb5a7a807, []int{1}
}

type Heartbeat struct {
	Endpoint             *string      `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	Os                   *Os          `protobuf:"varint,2,opt,name=os,enum=worker.Os" json:"os,omitempty"`
	State                *WorkerState `protobuf:"varint,3,opt,name=state,enum=worker.WorkerState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_worker_be6db57fb5a7a807, []int{0}
}
func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Heartbeat.Unmarshal(m, b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
}
func (dst *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(dst, src)
}
func (m *Heartbeat) XXX_Size() int {
	return xxx_messageInfo_Heartbeat.Size(m)
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func (m *Heartbeat) GetEndpoint() string {
	if m != nil && m.Endpoint != nil {
		return *m.Endpoint
	}
	return ""
}

func (m *Heartbeat) GetOs() Os {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return Os_Linux
}

func (m *Heartbeat) GetState() WorkerState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return WorkerState_Ready
}

func init() {
	proto.RegisterType((*Heartbeat)(nil), "worker.Heartbeat")
	proto.RegisterEnum("worker.Os", Os_name, Os_value)
	proto.RegisterEnum("worker.WorkerState", WorkerState_name, WorkerState_value)
}

func init() { proto.RegisterFile("worker.proto", fileDescriptor_worker_be6db57fb5a7a807) }

var fileDescriptor_worker_be6db57fb5a7a807 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8c, 0xb1, 0x8b, 0x83, 0x30,
	0x14, 0x87, 0x2f, 0xf1, 0xf4, 0xf4, 0x79, 0x1c, 0xe1, 0xdd, 0x22, 0x4e, 0xe2, 0x64, 0x1d, 0x1c,
	0xfa, 0x27, 0x94, 0x0e, 0x1d, 0x0a, 0x42, 0x3a, 0x38, 0xa7, 0x98, 0x21, 0x14, 0x12, 0x49, 0x22,
	0xd6, 0xff, 0xbe, 0xa8, 0x6d, 0xe9, 0xf4, 0xf8, 0xf8, 0xde, 0xf7, 0x83, 0xdf, 0xc9, 0xd8, 0x9b,
	0xb4, 0xcd, 0x60, 0x8d, 0x37, 0x18, 0x6d, 0x54, 0x6a, 0x48, 0x4e, 0x52, 0x58, 0x7f, 0x95, 0xc2,
	0x63, 0x0e, 0xb1, 0xd4, 0xfd, 0x60, 0x94, 0xf6, 0x19, 0x29, 0x48, 0x95, 0xf0, 0x37, 0x63, 0x0e,
	0xd4, 0xb8, 0x8c, 0x16, 0xa4, 0xfa, 0xdb, 0x43, 0xf3, 0xdc, 0x6a, 0x1d, 0xa7, 0xc6, 0xe1, 0x0e,
	0x42, 0xe7, 0x85, 0x97, 0x59, 0xb0, 0xea, 0xff, 0x97, 0xee, 0xd6, 0x73, 0x59, 0x14, 0xdf, 0x3e,
	0xea, 0x0a, 0x68, 0xeb, 0x30, 0x81, 0xf0, 0xac, 0xf4, 0x78, 0x67, 0x04, 0x01, 0xa2, 0xa3, 0xb0,
	0x93, 0xd2, 0x8c, 0x62, 0x0a, 0x3f, 0x9d, 0xd2, 0xbd, 0x99, 0x1c, 0x0b, 0xea, 0x12, 0xd2, 0x8f,
	0x7e, 0x49, 0xb8, 0x14, 0xfd, 0xcc, 0xbe, 0x30, 0x86, 0xef, 0xc3, 0xe8, 0x66, 0x46, 0x1e, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xf2, 0xbd, 0xf2, 0x42, 0xd4, 0x00, 0x00, 0x00,
}
